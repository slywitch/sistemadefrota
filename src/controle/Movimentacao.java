/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Movimentacao.java
 *
 * Created on 19/11/2009, 10:03:04
 */

package controle;

import classes.Combo;
import classes.ConexaoAccess;
import classes.Funcoes;
import java.awt.Dimension;
import java.sql.ResultSet;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jeferson
 */
public class Movimentacao extends javax.swing.JInternalFrame {

    private ConexaoAccess Conexao;
    private Funcoes Fun;
    int EventoItem;
    String doc;
    String Num_NF;
    String Chave;

    int ResultadoCalculo;

    /** Creates new form Movimentacao */
    public Movimentacao() {
        initComponents();

        JogarMotorista();
        JogarVeiculo();
        JogarFornecedor();
        JogarEvento();

        cboEventoItem.removeAllItems();
        EventoItem = Integer.parseInt(((Combo)cboEvento.getSelectedItem()).getKey());
        JogarEventoItem(EventoItem);

        cboProduto.removeAllItems();
        doc = String.valueOf(((Combo)cboFornecedor.getSelectedItem()).getKey());
        JogarProduto(doc);

        ProcedimentoCalculo();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cboMotorista = new javax.swing.JComboBox();
        jlbMotorista = new javax.swing.JLabel();
        jlbVeiculo = new javax.swing.JLabel();
        cboVeiculo = new javax.swing.JComboBox();
        jtfData = new javax.swing.JFormattedTextField();
        jlbData = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jlbFornecedor = new javax.swing.JLabel();
        jlbEvento = new javax.swing.JLabel();
        cboEvento = new javax.swing.JComboBox();
        jlbQtde = new javax.swing.JLabel();
        jtfQtde = new javax.swing.JTextField();
        cboEventoItem = new javax.swing.JComboBox();
        cboFornecedor = new javax.swing.JComboBox();
        jlbKm = new javax.swing.JLabel();
        jtfKm = new javax.swing.JTextField();
        jlbObs = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtpObs = new javax.swing.JTextPane();
        jbtMais = new javax.swing.JButton();
        jbtMenos = new javax.swing.JButton();
        cboProduto = new javax.swing.JComboBox();
        jlbProduto = new javax.swing.JLabel();
        jlbNumQtde = new javax.swing.JLabel();
        jlbQtdeEstoque = new javax.swing.JLabel();
        jbtSalvar = new javax.swing.JButton();
        jbtNovo = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setClosable(true);
        setTitle("Movimentação da Frota");

        cboMotorista.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jlbMotorista.setText("Motorista");

        jlbVeiculo.setText("Veículo");

        cboVeiculo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jtfData.setFormatterFactory(Fun.setFormatoData());

        jlbData.setText("Data");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cód", "Fornecedor", "Cód.", "Produto", "Cód.", "Item Evento", "Qtde", "N.F."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(0).setResizable(false);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(10);
        jTable1.getColumnModel().getColumn(1).setResizable(false);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(250);
        jTable1.getColumnModel().getColumn(2).setResizable(false);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(10);
        jTable1.getColumnModel().getColumn(3).setResizable(false);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(250);
        jTable1.getColumnModel().getColumn(4).setResizable(false);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(10);
        jTable1.getColumnModel().getColumn(5).setResizable(false);
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(250);
        jTable1.getColumnModel().getColumn(6).setResizable(false);
        jTable1.getColumnModel().getColumn(6).setPreferredWidth(10);
        jTable1.getColumnModel().getColumn(7).setResizable(false);
        jTable1.getColumnModel().getColumn(7).setPreferredWidth(50);

        jlbFornecedor.setText("Fornecedor");

        jlbEvento.setText("Evento");

        cboEvento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboEvento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cboEventoMouseClicked(evt);
            }
        });
        cboEvento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboEventoItemStateChanged(evt);
            }
        });
        cboEvento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboEventoActionPerformed(evt);
            }
        });

        jlbQtde.setText("QTDE");

        cboEventoItem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cboFornecedor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboFornecedor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cboFornecedorMouseClicked(evt);
            }
        });
        cboFornecedor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboFornecedorItemStateChanged(evt);
            }
        });
        cboFornecedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboFornecedorActionPerformed(evt);
            }
        });

        jlbKm.setText("Kilometragem");

        jlbObs.setText("OBS");

        jScrollPane2.setViewportView(jtpObs);

        jbtMais.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Add.png"))); // NOI18N
        jbtMais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtMaisActionPerformed(evt);
            }
        });

        jbtMenos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Delete.png"))); // NOI18N
        jbtMenos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtMenosActionPerformed(evt);
            }
        });

        cboProduto.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboProduto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboProdutoItemStateChanged(evt);
            }
        });
        cboProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboProdutoActionPerformed(evt);
            }
        });

        jlbProduto.setText("Produto");

        jlbNumQtde.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jlbNumQtde.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jlbQtdeEstoque.setText("Qtde em Estoque");

        jbtSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Salvar.png"))); // NOI18N
        jbtSalvar.setText("Salvar");
        jbtSalvar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtSalvar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSalvarActionPerformed(evt);
            }
        });

        jbtNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Novo.png"))); // NOI18N
        jbtNovo.setText("Novo");
        jbtNovo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtNovo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtNovoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1048, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jlbObs)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jlbFornecedor)
                                        .addComponent(cboFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jlbProduto)
                                            .addGap(244, 244, 244))
                                        .addComponent(cboProduto, 0, 305, Short.MAX_VALUE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jlbEvento)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(cboEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(cboEventoItem, 0, 257, Short.MAX_VALUE)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jtfQtde, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jlbQtde))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jbtMais)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jbtMenos))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jlbNumQtde, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jlbQtdeEstoque)))
                            .addGap(325, 325, 325))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jlbVeiculo)
                                .addComponent(cboVeiculo, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jlbMotorista)
                                .addComponent(cboMotorista, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jlbData)
                                .addComponent(jtfData, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jtfKm, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jlbKm)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 820, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbtNovo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtSalvar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlbVeiculo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboVeiculo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlbMotorista)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboMotorista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlbData)
                            .addComponent(jlbKm))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtfData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfKm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlbObs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlbProduto)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cboProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlbFornecedor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cboFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlbQtdeEstoque)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlbNumQtde, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlbEvento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboEventoItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jlbQtde)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jtfQtde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbtMais)
                            .addComponent(jbtMenos))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbtSalvar)
                    .addComponent(jbtNovo))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboEventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboEventoActionPerformed

    }//GEN-LAST:event_cboEventoActionPerformed

    private void cboEventoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cboEventoMouseClicked

    }//GEN-LAST:event_cboEventoMouseClicked

    private void cboEventoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboEventoItemStateChanged
        if (cboEvento.getItemCount()>0){
            EventoItem = Integer.parseInt(((Combo)cboEvento.getSelectedItem()).getKey());
            JogarEventoItem(EventoItem);
        }
    }//GEN-LAST:event_cboEventoItemStateChanged

    private void cboFornecedorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cboFornecedorMouseClicked
        
        cboProduto.removeAllItems();
        doc = String.valueOf(((Combo)cboFornecedor.getSelectedItem()).getKey());
        JogarProduto(doc);

        ProcedimentoCalculo();
               
    }//GEN-LAST:event_cboFornecedorMouseClicked

    private void cboFornecedorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboFornecedorItemStateChanged

        if (cboFornecedor.getItemCount()>0){
            cboProduto.removeAllItems();
            doc = String.valueOf(((Combo)cboFornecedor.getSelectedItem()).getKey());
            JogarProduto(doc);

            ProcedimentoCalculo();
        }

    }//GEN-LAST:event_cboFornecedorItemStateChanged

    private void cboProdutoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboProdutoItemStateChanged
        if (cboProduto.getItemCount()>0){
            ProcedimentoCalculo();
        }
    }//GEN-LAST:event_cboProdutoItemStateChanged

    private void jbtMaisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtMaisActionPerformed

        if (!(Integer.parseInt(jlbNumQtde.getText()) == 0)) {

            String codFornecedor = ((Combo)cboFornecedor.getSelectedItem()).getKey();
            String nomeFornecedor = ((Combo)cboFornecedor.getSelectedItem()).toString();

            String codProduto = String.valueOf(CodigoProduto(((Combo)cboProduto.getSelectedItem()).getKey()));
            String codProduto2 = ((Combo)cboProduto.getSelectedItem()).getKey();
            String nomeProduto = NomeProduto(Integer.parseInt(codProduto));

            String codEvento = ((Combo)cboEventoItem.getSelectedItem()).getKey();
            String nomeEvento = ((Combo)cboEventoItem.getSelectedItem()).toString();

            String NumNotaFiscal = NotaFiscal(Integer.parseInt(codProduto2));

            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
            Object[] Linha = {codFornecedor, nomeFornecedor, codProduto, nomeProduto, codEvento, nomeEvento, jtfQtde.getText(), NumNotaFiscal};
            modelo.addRow(Linha);

            MontaCombo();
            
        }

    }//GEN-LAST:event_jbtMaisActionPerformed

    private void jbtMenosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtMenosActionPerformed

        int linhaSelecionada = jTable1.getSelectedRow();

        DefaultTableModel modelo = (DefaultTableModel)jTable1.getModel();
        modelo.removeRow(linhaSelecionada);

        cboProduto.removeAllItems();
        JogarProduto(doc);
        
    }//GEN-LAST:event_jbtMenosActionPerformed

    private void cboProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboProdutoActionPerformed
    }//GEN-LAST:event_cboProdutoActionPerformed

    private void cboFornecedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboFornecedorActionPerformed
    }//GEN-LAST:event_cboFornecedorActionPerformed

    private void jbtSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSalvarActionPerformed

        String Veiculo = ((Combo)cboVeiculo.getSelectedItem()).getKey();
        String Motorista = ((Combo)cboMotorista.getSelectedItem()).getKey();

        Conexao = new ConexaoAccess();
        Conexao.Conectar();

        try {

                String SQL;
                String Prox;

                Fun = new Funcoes();
                Prox = Fun.Proximo("t_movimentacao");

                Fun = new Funcoes();
                String Data;

                if (!(Fun.isValidDate(jtfData.getText()))){
                    Data = null;
                } else {
                    Data = jtfData.getText();
                }

                SQL = "insert into t_movimentacao (codigo, chassis_cod, cpf_cod, data, km, obs) values (";
                SQL = SQL + Prox + ", '" + Veiculo + "', '" + Motorista + "', " + Data + ", '";
                SQL = SQL + jtfKm.getText() + "', '" + jtpObs.getText() + "') ";

                Conexao.setSQL(SQL);
                Conexao.Executar();

                int linha_total = jTable1.getRowCount();

                int contador = 1;

                int Prox_Item;
                Prox_Item = Integer.parseInt(Fun.Proximo("t_movimentacao_item"));

                while(contador <= linha_total){
                    int linha = contador - 1;

                    String coluna0 = jTable1.getValueAt(linha, 0).toString();
                    String coluna2 = jTable1.getValueAt(linha, 2).toString();
                    String coluna4 = jTable1.getValueAt(linha, 4).toString();
                    String coluna6 = jTable1.getValueAt(linha, 6).toString();
                    String coluna7 = jTable1.getValueAt(linha, 7).toString();

                    SQL = "insert into t_movimentacao_item (codigo, movimentacao_cod, fornecedor_cod, produto_cod, ";
                    SQL = SQL + "evento_item_cod, qtde, nf_cod) values (" + Prox_Item + ", " + Prox + ", " + coluna0 + ", ";
                    SQL = SQL + coluna2 + ", '" + coluna4 + "', " + coluna6 + ", '" + coluna7 + "') ";

                    Conexao.setSQL(SQL);
                    Conexao.Executar();

                    Prox_Item++;

                    contador++;

                }

        } catch (Exception Erro){
            JOptionPane.showMessageDialog(null, "(Erro na validação): " + Erro);
        }

        Conexao.Desconectar();

        Limpar();

        cboVeiculo.requestFocus();

    }//GEN-LAST:event_jbtSalvarActionPerformed

    private void jbtNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtNovoActionPerformed

        Limpar();

        cboVeiculo.requestFocus();

    }//GEN-LAST:event_jbtNovoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboEvento;
    private javax.swing.JComboBox cboEventoItem;
    private javax.swing.JComboBox cboFornecedor;
    private javax.swing.JComboBox cboMotorista;
    private javax.swing.JComboBox cboProduto;
    private javax.swing.JComboBox cboVeiculo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jbtMais;
    private javax.swing.JButton jbtMenos;
    private javax.swing.JButton jbtNovo;
    private javax.swing.JButton jbtSalvar;
    private javax.swing.JLabel jlbData;
    private javax.swing.JLabel jlbEvento;
    private javax.swing.JLabel jlbFornecedor;
    private javax.swing.JLabel jlbKm;
    private javax.swing.JLabel jlbMotorista;
    private javax.swing.JLabel jlbNumQtde;
    private javax.swing.JLabel jlbObs;
    private javax.swing.JLabel jlbProduto;
    private javax.swing.JLabel jlbQtde;
    private javax.swing.JLabel jlbQtdeEstoque;
    private javax.swing.JLabel jlbVeiculo;
    private javax.swing.JFormattedTextField jtfData;
    private javax.swing.JTextField jtfKm;
    private javax.swing.JTextField jtfQtde;
    private javax.swing.JTextPane jtpObs;
    // End of variables declaration//GEN-END:variables

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Movimentacao().setVisible(true);
            }
        });
    }

    public void centralizar(JDesktopPane dp) {
        Dimension ds = dp.getSize();
        Dimension dw = this.getSize();
        this.setLocation((ds.width - dw.width) / 2, (ds.height - dw.height) / 2);
    }

    private void JogarMotorista(){
        cboMotorista.removeAllItems();
        try {
            Conexao = new ConexaoAccess();
            Conexao.Conectar();
            Conexao.setSQL("select (cpf) as codigo, nome from t_motorista where exclusao = 0 order by nome");
            ResultSet RS = Conexao.Consultar();
            DefaultComboBoxModel Modelo = new DefaultComboBoxModel();
            while(RS.next()){
                Combo CB = new Combo(RS.getString("codigo"),RS.getString("nome"));
                Modelo.addElement(CB);
            }
            cboMotorista.setModel(Modelo);
        }catch(Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro: " + Erro);
        }
    }

    private void JogarVeiculo(){
        cboVeiculo.removeAllItems();
        try {
            Conexao = new ConexaoAccess();
            Conexao.Conectar();
            Conexao.setSQL("select (chassis) as codigo, (placa) as nome from t_veiculo where exclusao = 0  order by nome");
            ResultSet RS = Conexao.Consultar();
            DefaultComboBoxModel Modelo = new DefaultComboBoxModel();
            while(RS.next()){
                Combo CB = new Combo(RS.getString("codigo"),RS.getString("nome"));
                Modelo.addElement(CB);
            }
            cboVeiculo.setModel(Modelo);
        } catch(Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro: " + Erro);
        }
    }

    private void JogarFornecedor(){
        cboFornecedor.removeAllItems();
        try {
            Conexao = new ConexaoAccess();
            Conexao.Conectar();

            String SQL;

            SQL = "select (cnpjcpf) as codigo, (nomefantasia) as nome ";
            SQL = SQL + "from t_fornecedor ";
            SQL = SQL + "where cnpjcpf in (select fornecedor_cod from t_nota_fiscal) and exclusao = 0 ";
            SQL = SQL + "order by nome ";

            Conexao.setSQL(SQL);
            ResultSet RS = Conexao.Consultar();
            DefaultComboBoxModel Modelo = new DefaultComboBoxModel();
            while(RS.next()){

                int Calculo = ListaFornecedor(String.valueOf(RS.getString("codigo")));

                if (!(Calculo <= 0)) {
                    Combo CB = new Combo(RS.getString("codigo"),RS.getString("nome"));
                    Modelo.addElement(CB);
                }
                
            }
            cboFornecedor.setModel(Modelo);
        } catch(Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro: " + Erro);
        }
    }

    private void JogarEvento(){
        cboEvento.removeAllItems();
        try {
            Conexao = new ConexaoAccess();
            Conexao.Conectar();
            Conexao.setSQL("select codigo, (descricao) as nome from t_evento where exclusao = 0 order by nome");
            ResultSet RS = Conexao.Consultar();
            DefaultComboBoxModel Modelo = new DefaultComboBoxModel();
            while(RS.next()){
                Combo CB = new Combo(RS.getString("codigo"),RS.getString("nome"));
                Modelo.addElement(CB);
            }
            cboEvento.setModel(Modelo);
        } catch(Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro: " + Erro);
        }
    }

    private void JogarEventoItem(int CodigoEvento){

        cboEventoItem.removeAllItems();
        try {
            Conexao = new ConexaoAccess();
            Conexao.Conectar();
            String SQL;

            SQL = "select tei.codigo, (tei.descricao) as nome from t_evento_item tei ";
            SQL = SQL + "inner join t_evento tev on tev.codigo = tei.evento_cod ";
            SQL = SQL + "where tev.codigo = " + CodigoEvento + " and tev.exclusao = 0 ";
            SQL = SQL + "order by tei.descricao";

            Conexao.setSQL(SQL);
            ResultSet RS = Conexao.Consultar();
            DefaultComboBoxModel Modelo = new DefaultComboBoxModel();
            while(RS.next()){
                Combo CB = new Combo(RS.getString("codigo"),RS.getString("nome"));
                Modelo.addElement(CB);
            }
            cboEventoItem.setModel(Modelo);
        } catch(Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro: " + Erro);
        }
    }

    private void JogarProduto(String Doc){

        cboProduto.removeAllItems();
        try {
            Conexao = new ConexaoAccess();
            Conexao.Conectar();
            String SQL;

            SQL = "select tnfi.codigo, tnfi.produto_cod, (tnf.codigo) as nf, (tnf.codigo || ' - ' || tpro.nome) as nome ";
            SQL = SQL + "from t_fornecedor tfo ";
            SQL = SQL + "inner join t_nota_fiscal tnf on tnf.fornecedor_cod = tfo.cnpjcpf ";
            SQL = SQL + "inner join t_nota_fiscal_item tnfi on tnfi.nf_cod = tnf.codigo ";
            SQL = SQL + "and tnfi.chave_cod = tnf.chave ";
            SQL = SQL + "inner join t_produto tpro on tpro.codigo = tnfi.produto_cod ";
            SQL = SQL + "where tfo.cnpjcpf = '" + Doc + "' ";
            SQL = SQL + "and tfo.exclusao = 0 ";
            
            Conexao.setSQL(SQL);
            ResultSet RS = Conexao.Consultar();
            DefaultComboBoxModel Modelo = new DefaultComboBoxModel();
            while(RS.next()){

                int Calculo = ProcedimentoCalculoCombo(Integer.parseInt(RS.getString("produto_cod")), RS.getString("nf"));
                
                if (!(Calculo <= 0)) {
                    Combo CB = new Combo(RS.getString("codigo"),RS.getString("nome"));
                    Modelo.addElement(CB);
                }
                
            }            
            cboProduto.setModel(Modelo);
        } catch(Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro jogar produto: " + Erro);
        }

    } 

    private void Limpar(){

        jtfData.setText("");

        cboVeiculo.removeAllItems();
        JogarVeiculo();

        cboMotorista.removeAllItems();
        JogarMotorista();

        jtfData.setText("");
        jtfKm.setText("");
        jtpObs.setText("");

        cboFornecedor.removeAllItems();
        JogarFornecedor();

        jtfQtde.setText("");

        cboProduto.removeAllItems();
        doc = String.valueOf(((Combo)cboFornecedor.getSelectedItem()).getKey());
        JogarProduto(doc);

        cboEvento.removeAllItems();
        JogarEvento();

        cboEventoItem.removeAllItems();
        EventoItem = Integer.parseInt(((Combo)cboEvento.getSelectedItem()).getKey());
        JogarEventoItem(EventoItem);        

        ((DefaultTableModel) jTable1.getModel()).setNumRows(0);
        jTable1.updateUI();

    }

    private void MontaCombo(){
     
        cboFornecedor.removeAllItems();
        JogarFornecedor();

        cboProduto.removeAllItems();
        doc = String.valueOf(((Combo)cboFornecedor.getSelectedItem()).getKey());
        JogarProduto(doc);

        cboEvento.removeAllItems();
        JogarEvento();

        cboEventoItem.removeAllItems();
        EventoItem = Integer.parseInt(((Combo)cboEvento.getSelectedItem()).getKey());
        JogarEventoItem(EventoItem);
        
        jtfQtde.setText("");

        ProcedimentoCalculo();

    }

    private void ProcedimentoCalculo(){

        int Produto = Integer.parseInt(((Combo)cboProduto.getSelectedItem()).getKey());
        int Produto2 = CodigoProduto(((Combo)cboProduto.getSelectedItem()).getKey());
        String NumeroNota = BuscaNumeroNF(Produto);
        
        int Mov = VerificaBDMovimentacao(NumeroNota, Produto2);
        int NF = VerificaBDNotaFiscal(NumeroNota, Produto2);
        int GR = VerificaADDNaGrid(NumeroNota, Produto2);

        int Calculo = Calculando(Mov, GR, NF);

        jlbNumQtde.setText(String.valueOf(Calculo));
        
    }

    private int ProcedimentoCalculoCombo(int CodProduto, String NumeroNota){

        int Resultado = 0;

        int Produto = CodProduto;
        int Produto2 = CodigoProduto(String.valueOf(CodProduto));
        //String NumeroNota = BuscaNumeroNF(Produto);

        int Mov = VerificaBDMovimentacao(NumeroNota, Produto);
        int NF = VerificaBDNotaFiscal(NumeroNota, Produto);
        int GR = VerificaADDNaGrid(NumeroNota, Produto2);

        Resultado = Calculando(Mov, GR, NF);

        return Resultado;

    }

    private int ListaFornecedor(String Codigo){

        int Resultado = 0;
        int Soma = 0;

        try {

            Conexao = new ConexaoAccess();
            Conexao.Conectar();
            String SQL;

            SQL = "select tnfi.produto_cod, tnf.codigo "; //(tnf.codigo || ' - ' || tpro.nome) as nome ";
            SQL = SQL + "from t_fornecedor tfo ";
            SQL = SQL + "inner join t_nota_fiscal tnf on tnf.fornecedor_cod = tfo.cnpjcpf ";
            SQL = SQL + "inner join t_nota_fiscal_item tnfi on tnfi.nf_cod = tnf.codigo ";
            SQL = SQL + "inner join t_produto tpro on tpro.codigo = tnfi.produto_cod ";
            SQL = SQL + "where tfo.cnpjcpf = '" + Codigo + "' and tfo.exclusao = 0 ";

            Conexao.setSQL(SQL);
            ResultSet RS = Conexao.Consultar();
            while(RS.next()){

                int Calculo = ProcedimentoCalculoCombo(Integer.parseInt(RS.getString("produto_cod")), RS.getString("codigo"));

                Soma = Soma + Calculo;

            }

        }catch(NumberFormatException e){
            System.out.println("Dados invalidos. Impossivel converter letras para números.");
        }catch(Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro lista fornecedor: " + Erro);
        }

        return Resultado = Soma;

    }

    private String BuscaNumeroNF (int Codigo){

        String ResultadoNotaFiscal = null;

        Conexao = new ConexaoAccess();
        Conexao.Conectar();
        String SQL;

        SQL = "select tmi.nf_cod ";
        SQL = SQL + "from t_movimentacao_item tmi ";
        SQL = SQL + "inner join t_nota_fiscal_item tnfi on tnfi.nf_cod = tmi.nf_cod ";
	SQL = SQL + "and tnfi.produto_cod = tmi.produto_cod ";
        SQL = SQL + "where tnfi.codigo = " + Codigo + "  and tmi.exclusao = 0 ";

        Conexao.setSQL(SQL);
        ResultSet RS = Conexao.Consultar();

        try{
            if (RS.next()){
                ResultadoNotaFiscal = String.valueOf(RS.getString("nf_cod"));
            } else {
                ResultadoNotaFiscal = EscapeNF(Codigo);
            }
        } catch(Exception Erro) {
                JOptionPane.showMessageDialog(null, "Erro ao buscar número da nota fiscal: " + Erro);
        }

        if (ResultadoNotaFiscal == null){
            ResultadoNotaFiscal = EscapeNF(Codigo);
        }

        return ResultadoNotaFiscal;
    }

    private String EscapeNF(int Codigo){

        String NumeroNotaFiscal = null;
        String SQL = null;

        SQL = "select tnfi.nf_cod from t_nota_fiscal_item tnfi where tnfi.codigo = " + Codigo + " and tnfi.exclusao = 0 ";

        Conexao.setSQL(SQL);
        ResultSet NF = Conexao.Consultar();

        try{
            if (NF.next()){
                NumeroNotaFiscal = String.valueOf(NF.getString("nf_cod"));
            }
        } catch(Exception Erro) {
                JOptionPane.showMessageDialog(null, "Erro no escape da nota fiscal: " + Erro);
        }

        return NumeroNotaFiscal;

    }

    private int VerificaBDMovimentacao (String NF, int Produto){

        int ResultadoFuncao = 0;

        Conexao = new ConexaoAccess();
        Conexao.Conectar();
        String SQL;

        SQL = "select (sum(tmi.qtde)) as qtde ";
        SQL = SQL + "from t_movimentacao_item tmi ";
        SQL = SQL + "inner join t_movimentacao tmv on tmv.codigo = tmi.movimentacao_cod ";
        SQL = SQL + "inner join t_nota_fiscal tnf on tnf.codigo = tmi.nf_cod ";
        SQL = SQL + "inner join t_fornecedor tfo on tfo.cnpjcpf = tnf.fornecedor_cod ";
        SQL = SQL + "where tmi.produto_cod = " + Produto + " ";
        SQL = SQL + "and tmi.nf_cod = '" + NF + "' and tmi.exclusao = 0 ";

        Conexao.setSQL(SQL);
        ResultSet RS = Conexao.Consultar();        
        
        try{
            
            if (RS.next()){                
                ResultadoFuncao = Integer.parseInt(RS.getString("qtde"));
            } else {
                ResultadoFuncao = Integer.parseInt("0");
            }
        }catch(NumberFormatException e){
            System.out.println("Dados invalidos. Impossivel converter letras para números.");
        }catch(Exception Erro) {
            JOptionPane.showMessageDialog(null, "Erro na verificação do banco de dados movimentacao: " + Erro);
        }

        return ResultadoFuncao;

    }

    private int VerificaADDNaGrid(String NotaFiscal, int Produto){

        int Resultado = 0;

        int linha_total = jTable1.getRowCount();
        int contador = 1;

        while(contador <= linha_total){

            int linha = contador - 1;

            String coluna2 = jTable1.getValueAt(linha, 2).toString(); //Código do Produto
            String coluna6 = jTable1.getValueAt(linha, 6).toString(); // QTDE
            String coluna7 = (jTable1.getValueAt(linha, 7).toString()); // NF
            
            if (Produto == Integer.parseInt(coluna2) && NotaFiscal.equals(coluna7)){
                Resultado = Integer.parseInt(coluna6);
                break;
            } 

            contador++;

        }

        return Resultado;

    }

    private int VerificaBDNotaFiscal (String NF, int Produto){

        int Resultado = 0;

        Conexao = new ConexaoAccess();
        Conexao.Conectar();
        String SQL;

        SQL = "select (sum(tnfi.qtde)) as qtde ";
        SQL = SQL + "from t_nota_fiscal_item tnfi ";
        SQL = SQL + "where tnfi.produto_cod = " + Produto + " ";
        SQL = SQL + "and tnfi.nf_cod = '" + NF + "' and tnfi.exclusao = 0 ";

        Conexao.setSQL(SQL);
        ResultSet RS = Conexao.Consultar();

        try{
            if (RS.next()){
                Resultado = Integer.parseInt(RS.getString("qtde"));
            }
        } catch (NumberFormatException e){
            System.out.println("Dados invalidos. Impossivel converter letras para números.");
        } catch(Exception Erro) {
            JOptionPane.showMessageDialog(null, "Erro no banco de dados da nota fiscal: " + Erro);
        }

        return Resultado;

    }

    private int Calculando(int Mov, int Grid, int NF){

        int ResultadoCalculando = 0;
        
        ResultadoCalculando = (NF - (Mov + Grid));

        return ResultadoCalculando;

    }

    private int CodigoProduto(String Codigo){

        int Resultado = 0;
        String SQL = null;

        SQL = "select (produto_cod) as retorno from t_nota_fiscal_item where codigo = " + Codigo + " and exclusao = 0 ";

        Fun = new Funcoes();
        Resultado = Integer.parseInt(Fun.FuncaoSQL(SQL));
        
        return Resultado;

    }

    private String NomeProduto(int Codigo){

        String Resultado = null;
        String SQL = null;

        SQL = "select (nome) as retorno from t_produto where codigo = " + Codigo + " and exclusao = 0 ";

        Fun = new Funcoes();
        Resultado = Fun.FuncaoSQL(SQL);

        return Resultado;

    }

    private String NotaFiscal(int Codigo){

        String Resultado = null;
        String SQL = null;

        SQL = "select (nf_cod) as retorno from t_nota_fiscal_item where codigo = " + Codigo + " and exclusao = 0 ";

        Fun = new Funcoes();
        Resultado = Fun.FuncaoSQL(SQL);

        return Resultado;

    }

}