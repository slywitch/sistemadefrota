/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Movimentacao.java
 *
 * Created on 19/11/2009, 10:03:04
 */

package controle;

import classes.Combo;
import classes.ConexaoAccess;
import classes.Funcoes;
import java.awt.Dimension;
import java.sql.ResultSet;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jeferson
 */
public class Movimentacao extends javax.swing.JInternalFrame {

    private ConexaoAccess Conexao;
    private Funcoes Fun;
    int EventoItem;
    String doc;
    String NF;
    String Num_NF;
    String Chave;

    /** Creates new form Movimentacao */
    public Movimentacao() {
        initComponents();

        JogarMotorista();
        JogarVeiculo();
        JogarFornecedor();
        JogarEvento();

        cboEventoItem.removeAllItems();
        EventoItem = Integer.parseInt(((Combo)cboEvento.getSelectedItem()).getKey());
        JogarEventoItem(EventoItem);

        cboProduto.removeAllItems();
        doc = String.valueOf(((Combo)cboFornecedor.getSelectedItem()).getKey());
        JogarProduto(doc);

        NF = String.valueOf(((Combo)cboProduto.getSelectedItem()).getKey());

        TamanhoTabela();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        cboMotorista = new javax.swing.JComboBox();
        jlbMotorista = new javax.swing.JLabel();
        jlbVeiculo = new javax.swing.JLabel();
        cboVeiculo = new javax.swing.JComboBox();
        jtfData = new javax.swing.JFormattedTextField();
        jlbData = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jlbFornecedor = new javax.swing.JLabel();
        jlbEvento = new javax.swing.JLabel();
        cboEvento = new javax.swing.JComboBox();
        jlbQtde = new javax.swing.JLabel();
        jtfQtde = new javax.swing.JTextField();
        cboEventoItem = new javax.swing.JComboBox();
        cboFornecedor = new javax.swing.JComboBox();
        jlbKm = new javax.swing.JLabel();
        jtfKm = new javax.swing.JTextField();
        jlbObs = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtpObs = new javax.swing.JTextPane();
        jbtMais = new javax.swing.JButton();
        jbtMenos = new javax.swing.JButton();
        cboProduto = new javax.swing.JComboBox();
        jlbProduto = new javax.swing.JLabel();
        jlbNumQtde = new javax.swing.JLabel();
        jlbQtdeEstoque = new javax.swing.JLabel();
        jmbBarra = new javax.swing.JMenuBar();
        jmnArquivo = new javax.swing.JMenu();
        jmiNovo = new javax.swing.JMenuItem();
        jmiSalvar = new javax.swing.JMenuItem();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setClosable(true);
        setTitle("Movimentação da Frota");

        cboMotorista.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jlbMotorista.setText("Motorista");

        jlbVeiculo.setText("Veículo");

        cboVeiculo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jtfData.setFormatterFactory(Fun.setFormatoData());

        jlbData.setText("Data");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cód", "Fornecedor", "Cód.", "Produto", "Cód.", "Item Evento", "Qtde", "NF"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(0).setResizable(false);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(20);
        jTable1.getColumnModel().getColumn(1).setResizable(false);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(250);
        jTable1.getColumnModel().getColumn(2).setResizable(false);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(20);
        jTable1.getColumnModel().getColumn(3).setResizable(false);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(250);
        jTable1.getColumnModel().getColumn(4).setResizable(false);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(20);
        jTable1.getColumnModel().getColumn(5).setResizable(false);
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(250);
        jTable1.getColumnModel().getColumn(6).setResizable(false);
        jTable1.getColumnModel().getColumn(6).setPreferredWidth(20);
        jTable1.getColumnModel().getColumn(7).setResizable(false);
        jTable1.getColumnModel().getColumn(7).setPreferredWidth(50);

        jlbFornecedor.setText("Fornecedor");

        jlbEvento.setText("Evento");

        cboEvento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboEvento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cboEventoMouseClicked(evt);
            }
        });
        cboEvento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboEventoItemStateChanged(evt);
            }
        });
        cboEvento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboEventoActionPerformed(evt);
            }
        });

        jlbQtde.setText("QTDE");

        cboEventoItem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cboFornecedor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboFornecedor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cboFornecedorMouseClicked(evt);
            }
        });
        cboFornecedor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboFornecedorItemStateChanged(evt);
            }
        });
        cboFornecedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboFornecedorActionPerformed(evt);
            }
        });

        jlbKm.setText("Kilometragem");

        jlbObs.setText("OBS");

        jScrollPane2.setViewportView(jtpObs);

        jbtMais.setText("+");
        jbtMais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtMaisActionPerformed(evt);
            }
        });

        jbtMenos.setText("-");
        jbtMenos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtMenosActionPerformed(evt);
            }
        });

        cboProduto.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboProduto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboProdutoItemStateChanged(evt);
            }
        });
        cboProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboProdutoActionPerformed(evt);
            }
        });

        jlbProduto.setText("Produto");

        jlbNumQtde.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jlbNumQtde.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jlbQtdeEstoque.setText("Qtde em Estoque");

        jmnArquivo.setText("Arquivo");

        jmiNovo.setText("Novo");
        jmiNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiNovoActionPerformed(evt);
            }
        });
        jmnArquivo.add(jmiNovo);

        jmiSalvar.setText("Salvar");
        jmiSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSalvarActionPerformed(evt);
            }
        });
        jmnArquivo.add(jmiSalvar);

        jmbBarra.add(jmnArquivo);

        setJMenuBar(jmbBarra);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 992, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jlbObs)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jlbFornecedor)
                                        .addComponent(cboFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jlbProduto)
                                            .addGap(244, 244, 244))
                                        .addComponent(cboProduto, 0, 305, Short.MAX_VALUE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jlbEvento)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(cboEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(cboEventoItem, 0, 257, Short.MAX_VALUE)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jtfQtde, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jlbQtde))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jlbNumQtde, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jlbQtdeEstoque))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jbtMais)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jbtMenos)))
                            .addGap(323, 323, 323))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jlbVeiculo)
                                .addComponent(cboVeiculo, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jlbMotorista)
                                .addComponent(cboMotorista, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jlbData)
                                .addComponent(jtfData, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jtfKm, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jlbKm)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 820, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlbVeiculo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboVeiculo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlbMotorista)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboMotorista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlbData)
                            .addComponent(jlbKm))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtfData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfKm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlbObs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlbProduto)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cboProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlbFornecedor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cboFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlbEvento)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cboEventoItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cboEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jlbQtde)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jtfQtde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jbtMais)
                                    .addComponent(jbtMenos)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlbQtdeEstoque)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlbNumQtde, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void jmiNovoActionPerformed(java.awt.event.ActionEvent evt) {                                        

        Limpar();

        cboVeiculo.requestFocus();

    }                                       

    private void jmiSalvarActionPerformed(java.awt.event.ActionEvent evt) {                                          

        String Veiculo = ((Combo)cboVeiculo.getSelectedItem()).getKey();
        String Motorista = ((Combo)cboMotorista.getSelectedItem()).getKey();

        Conexao = new ConexaoAccess();
        Conexao.Conectar();

        try {

                String SQL;
                String Prox;

                Fun = new Funcoes();
                Prox = Fun.Proximo("t_movimentacao");

                SQL = "insert into t_movimentacao (codigo, chassis_cod, cpf_cod, data, km, obs) values (";
                SQL = SQL + Prox + ", '" + Veiculo + "', '" + Motorista + "', '" + jtfData.getText() + "', '";
                SQL = SQL + jtfKm.getText() + "', '" + jtpObs.getText() + "') ";

                Conexao.setSQL(SQL);
                Conexao.Executar();

                int linha_total = jTable1.getRowCount();

                int contador = 1;

                int Prox_Item;
                Prox_Item = Integer.parseInt(Fun.Proximo("t_movimentacao_item"));

                while(contador <= linha_total){
                    int linha = contador - 1;

                    String coluna0 = jTable1.getValueAt(linha, 0).toString();
                    String coluna2 = jTable1.getValueAt(linha, 2).toString();
                    String coluna4 = jTable1.getValueAt(linha, 4).toString();
                    String coluna6 = jTable1.getValueAt(linha, 6).toString();
                    String coluna7 = jTable1.getValueAt(linha, 7).toString();

                    SQL = "insert into t_movimentacao_item (codigo, movimentacao_cod, fornecedor_cod, produto_cod, ";
                    SQL = SQL + "evento_item_cod, qtde, nf_cod) values (" + Prox_Item + ", " + Prox + ", " + coluna0 + ", ";
                    SQL = SQL + coluna2 + ", '" + coluna4 + "', " + coluna6 + ", '" + coluna7 + "') ";

                    Conexao.setSQL(SQL);
                    Conexao.Executar();

                    Prox_Item++;

                    contador++;

                }

        } catch (Exception Erro){
            JOptionPane.showMessageDialog(null, "(Erro na validação): " + Erro);
        }

        Conexao.Desconectar();

        Limpar();

        cboVeiculo.requestFocus();

        MostraQtdeEstoque();

    }                                         

    private void cboEventoActionPerformed(java.awt.event.ActionEvent evt) {                                          

    }                                         

    private void cboEventoMouseClicked(java.awt.event.MouseEvent evt) {                                       

    }                                      

    private void cboEventoItemStateChanged(java.awt.event.ItemEvent evt) {                                           
        if (cboEvento.getItemCount()>0){
            EventoItem = Integer.parseInt(((Combo)cboEvento.getSelectedItem()).getKey());
            JogarEventoItem(EventoItem);
        }
    }                                          

    private void cboFornecedorMouseClicked(java.awt.event.MouseEvent evt) {                                           
        
        cboProduto.removeAllItems();
        doc = String.valueOf(((Combo)cboFornecedor.getSelectedItem()).getKey());
        JogarProduto(doc);
        
        //MostraQtdeEstoque();
                
    }                                          

    private void cboFornecedorItemStateChanged(java.awt.event.ItemEvent evt) {                                               

        if (cboFornecedor.getItemCount()>0){
            cboProduto.removeAllItems();
            doc = String.valueOf(((Combo)cboFornecedor.getSelectedItem()).getKey());

            int Key = Integer.parseInt(Chave(doc));
            String Nf = NumNF(Key);
            
            JogarProduto(doc);
        }

    }                                              

    private void cboProdutoItemStateChanged(java.awt.event.ItemEvent evt) {                                            
        if (cboProduto.getItemCount()>0){
            MostraQtdeEstoque();
            Num_NF = ((Combo)cboProduto.getSelectedItem()).getKey();
        }
    }                                           

    private void jbtMaisActionPerformed(java.awt.event.ActionEvent evt) {                                        

        if (!(Integer.parseInt(jlbNumQtde.getText()) == 0)) {

            String codFornecedor = ((Combo)cboFornecedor.getSelectedItem()).getKey();
            String nomeFornecedor = ((Combo)cboFornecedor.getSelectedItem()).toString();

            String codProduto = String.valueOf(CodigoProduto(Integer.parseInt(((Combo)cboProduto.getSelectedItem()).getKey())));
            String codProduto2 = ((Combo)cboProduto.getSelectedItem()).getKey();
            String nomeProduto = NomeProduto(Integer.parseInt(codProduto));
            
            String NotaFiscal;
            String chave = Chave(codProduto2);
            NotaFiscal = NumNF(Integer.parseInt(chave));
            
            String codEvento = ((Combo)cboEventoItem.getSelectedItem()).getKey();
            String nomeEvento = ((Combo)cboEventoItem.getSelectedItem()).toString();            

            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
            Object[] Linha = {codFornecedor, nomeFornecedor, codProduto, nomeProduto, codEvento, nomeEvento, jtfQtde.getText(), NotaFiscal};
            modelo.addRow(Linha);

            Add();
            
        }

    }                                       

    private void jbtMenosActionPerformed(java.awt.event.ActionEvent evt) {                                         

        int linhaSelecionada = jTable1.getSelectedRow();

        DefaultTableModel modelo = (DefaultTableModel)jTable1.getModel();
        modelo.removeRow(linhaSelecionada);

        cboProduto.removeAllItems();
        JogarProduto(doc);
        
    }                                        

    private void cboProdutoActionPerformed(java.awt.event.ActionEvent evt) {                                           
        
    }                                          

    private void cboFornecedorActionPerformed(java.awt.event.ActionEvent evt) {                                              

        //cboProduto.removeAllItems();
        //doc = String.valueOf(((Combo)cboFornecedor.getSelectedItem()).getKey());
        //JogarProduto(doc);

        //String codProduto = String.valueOf(CodigoProduto(Integer.parseInt(((Combo)cboProduto.getSelectedItem()).getKey())));
        //String nomeProduto = NomeProduto(Integer.parseInt(codProduto));

    }                                             


    // Variables declaration - do not modify                     
    private javax.swing.JComboBox cboEvento;
    private javax.swing.JComboBox cboEventoItem;
    private javax.swing.JComboBox cboFornecedor;
    private javax.swing.JComboBox cboMotorista;
    private javax.swing.JComboBox cboProduto;
    private javax.swing.JComboBox cboVeiculo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jbtMais;
    private javax.swing.JButton jbtMenos;
    private javax.swing.JLabel jlbData;
    private javax.swing.JLabel jlbEvento;
    private javax.swing.JLabel jlbFornecedor;
    private javax.swing.JLabel jlbKm;
    private javax.swing.JLabel jlbMotorista;
    private javax.swing.JLabel jlbNumQtde;
    private javax.swing.JLabel jlbObs;
    private javax.swing.JLabel jlbProduto;
    private javax.swing.JLabel jlbQtde;
    private javax.swing.JLabel jlbQtdeEstoque;
    private javax.swing.JLabel jlbVeiculo;
    private javax.swing.JMenuBar jmbBarra;
    private javax.swing.JMenuItem jmiNovo;
    private javax.swing.JMenuItem jmiSalvar;
    private javax.swing.JMenu jmnArquivo;
    private javax.swing.JFormattedTextField jtfData;
    private javax.swing.JTextField jtfKm;
    private javax.swing.JTextField jtfQtde;
    private javax.swing.JTextPane jtpObs;
    // End of variables declaration                   

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Veiculo().setVisible(true);
            }
        });
    }

    public void centralizar(JDesktopPane dp) {
        Dimension ds = dp.getSize();
        Dimension dw = this.getSize();
        this.setLocation((ds.width - dw.width) / 2, (ds.height - dw.height) / 2);
    }

    private void JogarMotorista(){
        cboMotorista.removeAllItems();
        try {
            Conexao = new ConexaoAccess();
            Conexao.Conectar();
            Conexao.setSQL("select (cpf) as codigo, nome from t_motorista order by nome");
            ResultSet RS = Conexao.Consultar();
            DefaultComboBoxModel Modelo = new DefaultComboBoxModel();
            while(RS.next()){
                Combo CB = new Combo(RS.getString("codigo"),RS.getString("nome"));
                Modelo.addElement(CB);
            }
            cboMotorista.setModel(Modelo);
        }catch(Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro: " + Erro);
        }
    }

    private void JogarVeiculo(){
        cboVeiculo.removeAllItems();
        try {
            Conexao = new ConexaoAccess();
            Conexao.Conectar();
            Conexao.setSQL("select (chassis) as codigo, (placa) as nome from t_veiculo order by nome");
            ResultSet RS = Conexao.Consultar();
            DefaultComboBoxModel Modelo = new DefaultComboBoxModel();
            while(RS.next()){
                Combo CB = new Combo(RS.getString("codigo"),RS.getString("nome"));
                Modelo.addElement(CB);
            }
            cboVeiculo.setModel(Modelo);
        } catch(Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro: " + Erro);
        }
    }

    private void JogarFornecedor(){
        cboFornecedor.removeAllItems();
        try {
            Conexao = new ConexaoAccess();
            Conexao.Conectar();

            String SQL;

            SQL = "select (cnpjcpf) as codigo, (nomefantasia) as nome ";
            SQL = SQL + "from t_fornecedor ";
            SQL = SQL + "where cnpjcpf in (select fornecedor_cod from t_nota_fiscal) ";
            SQL = SQL + "order by nome ";

            Conexao.setSQL(SQL);
            ResultSet RS = Conexao.Consultar();
            DefaultComboBoxModel Modelo = new DefaultComboBoxModel();
            while(RS.next()){

                int Calculo = ListaFornecedor(String.valueOf(RS.getString("codigo")));

                if (!(Calculo == 0)) {
                    Combo CB = new Combo(RS.getString("codigo"),RS.getString("nome"));
                    Modelo.addElement(CB);
                }
                
            }
            cboFornecedor.setModel(Modelo);
        } catch(Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro: " + Erro);
        }
    }

    private void JogarEvento(){
        cboEvento.removeAllItems();
        try {
            Conexao = new ConexaoAccess();
            Conexao.Conectar();
            Conexao.setSQL("select codigo, (descricao) as nome from t_evento order by nome");
            ResultSet RS = Conexao.Consultar();
            DefaultComboBoxModel Modelo = new DefaultComboBoxModel();
            while(RS.next()){
                Combo CB = new Combo(RS.getString("codigo"),RS.getString("nome"));
                Modelo.addElement(CB);
            }
            cboEvento.setModel(Modelo);
        } catch(Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro: " + Erro);
        }
    }

    private void JogarEventoItem(int CodigoEvento){

        cboEventoItem.removeAllItems();
        try {
            Conexao = new ConexaoAccess();
            Conexao.Conectar();
            String SQL;

            SQL = "select tei.codigo, (tei.descricao) as nome from t_evento_item tei ";
            SQL = SQL + "inner join t_evento tev on tev.codigo = tei.evento_cod ";
            SQL = SQL + "where tev.codigo = " + CodigoEvento + " ";
            SQL = SQL + "order by tei.descricao";

            Conexao.setSQL(SQL);
            ResultSet RS = Conexao.Consultar();
            DefaultComboBoxModel Modelo = new DefaultComboBoxModel();
            while(RS.next()){
                Combo CB = new Combo(RS.getString("codigo"),RS.getString("nome"));
                Modelo.addElement(CB);
            }
            cboEventoItem.setModel(Modelo);
        } catch(Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro: " + Erro);
        }
    }

    private void JogarProduto(String Doc){

        cboProduto.removeAllItems();
        try {
            Conexao = new ConexaoAccess();
            Conexao.Conectar();
            String SQL;

            SQL = "select tnfi.codigo, (tnf.codigo || ' - ' || tpro.nome) as nome ";
            SQL = SQL + "from t_fornecedor tfo ";
            SQL = SQL + "inner join t_nota_fiscal tnf on tnf.fornecedor_cod = tfo.cnpjcpf ";
            SQL = SQL + "inner join t_nota_fiscal_item tnfi on tnfi.nf_cod = tnf.codigo ";
            SQL = SQL + "and tnfi.chave_cod = tnf.chave ";
            SQL = SQL + "inner join t_produto tpro on tpro.codigo = tnfi.produto_cod ";
            SQL = SQL + "where tfo.cnpjcpf = '" + Doc + "' ";
            
            Conexao.setSQL(SQL);
            ResultSet RS = Conexao.Consultar();
            DefaultComboBoxModel Modelo = new DefaultComboBoxModel();
            while(RS.next()){

                int Calculo = Calculando(Integer.parseInt(RS.getString("Codigo")));
                
                if (!(Calculo == 0)) {
                    Combo CB = new Combo(RS.getString("codigo"),RS.getString("nome"));
                    Modelo.addElement(CB);
                }
                
            }            
            cboProduto.setModel(Modelo);
        } catch(Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro: " + Erro);
        }

        MostraQtdeEstoque();

    }

    private void MostraQtdeEstoque(){

        int cod = Integer.parseInt(((Combo)cboProduto.getSelectedItem()).getKey());

        jlbNumQtde.setText(String.valueOf(CalculoEstoque(cod)));

        int Prod = CodigoProduto(Integer.parseInt(((Combo)cboProduto.getSelectedItem()).getKey()));
        int Prod2 = Integer.parseInt(((Combo)cboProduto.getSelectedItem()).getKey());
        String Code = ((Combo)cboProduto.getSelectedItem()).getKey();

        String Resultado = String.valueOf(VerificaADD(Prod, Integer.parseInt(jlbNumQtde.getText()),Integer.parseInt(Code)));

        String Prod2a = NumNF(Integer.parseInt(Code));
       
        int Prod2b = QtdeMovimentada(Prod2a, cod);        
       
        int Diferenca = (Integer.parseInt(Resultado) - Prod2b);

        jlbNumQtde.setText(String.valueOf(Diferenca));       
        
    }

    private int CodigoProduto(int NFI){

        int Codigo = 0;
        String SQL;

        SQL = "select produto_cod from t_nota_fiscal_item where codigo = " + NFI + "";

        Conexao = new ConexaoAccess();
        Conexao.Conectar();
        Conexao.setSQL(SQL);

        ResultSet RS = Conexao.Consultar();

        try{
            if (RS.next()){
                Codigo = Integer.parseInt(RS.getString("produto_cod"));
            }
        }catch (Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro na validação da função: " + Erro);
        }

        Conexao.Desconectar();

        return Codigo;

    }

    private int CalculoEstoque (int Codigo){

        String SQL;
        int QtdeEstoque = 0;

        SQL = "select tpro.nome, (sum(tnfi.qtde)) as qtde ";
        SQL = SQL + "from t_nota_fiscal_item tnfi ";
        SQL = SQL + "inner join t_nota_fiscal tnf on tnf.codigo = tnfi.nf_cod ";
        SQL = SQL + "and tnf.chave = tnfi.chave_cod ";
        SQL = SQL + "inner join t_produto tpro on tpro.codigo = tnfi.produto_cod ";
        //SQL = SQL + "inner join t_movimentacao_item tmi on tmi.nf_cod = tnf.codigo ";
        //SQL = SQL + "inner join t_movimentacao tmo on tmo.codigo = tmi.movimentacao_cod ";
        SQL = SQL + "where tnfi.codigo = " + Codigo + " ";
        SQL = SQL + "group by tpro.nome ";

        System.out.println(SQL);

        Conexao = new ConexaoAccess();
        Conexao.Conectar();
        Conexao.setSQL(SQL);

        ResultSet RS = Conexao.Consultar();

        try{
            if (RS.next()){
                QtdeEstoque = Integer.parseInt(RS.getString("qtde"));
            }
        }catch (Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro na validação da função: " + Erro);
        }

        Conexao.Desconectar();

        return QtdeEstoque;

    }

    private void Limpar(){

        jtfData.setText("");

        cboVeiculo.removeAllItems();
        JogarVeiculo();

        cboMotorista.removeAllItems();
        JogarMotorista();

        jtfData.setText("");
        jtfKm.setText("");
        jtpObs.setText("");

        cboFornecedor.removeAllItems();
        JogarFornecedor();

        jtfQtde.setText("");

        cboProduto.removeAllItems();
        doc = String.valueOf(((Combo)cboFornecedor.getSelectedItem()).getKey());
        JogarProduto(doc);

        cboEvento.removeAllItems();
        JogarEvento();

        cboEventoItem.removeAllItems();
        EventoItem = Integer.parseInt(((Combo)cboEvento.getSelectedItem()).getKey());
        JogarEventoItem(EventoItem);        

        ((DefaultTableModel) jTable1.getModel()).setNumRows(0);
        jTable1.updateUI();

    }

    private void TamanhoTabela(){

        jTable1.getColumnModel().getColumn(0).setResizable(false);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(10);
        jTable1.getColumnModel().getColumn(1).setResizable(false);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(250);
        jTable1.getColumnModel().getColumn(2).setResizable(false);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(10);
        jTable1.getColumnModel().getColumn(3).setResizable(false);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(250);
        jTable1.getColumnModel().getColumn(4).setResizable(false);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(10);
        jTable1.getColumnModel().getColumn(5).setResizable(false);
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(250);
        jTable1.getColumnModel().getColumn(6).setResizable(false);
        jTable1.getColumnModel().getColumn(6).setPreferredWidth(10);

    }

    private void Add(){

        cboFornecedor.removeAllItems();
        JogarFornecedor();

        cboProduto.removeAllItems();
        doc = String.valueOf(((Combo)cboFornecedor.getSelectedItem()).getKey());
        JogarProduto(doc);

        cboEvento.removeAllItems();
        JogarEvento();

        cboEventoItem.removeAllItems();
        EventoItem = Integer.parseInt(((Combo)cboEvento.getSelectedItem()).getKey());
        JogarEventoItem(EventoItem);

        jtfQtde.setText("");        

    }

    private String VerificaADD(int Produto, int Qtde, int Cod){

        String Resultado = null;

        int linha_total = jTable1.getRowCount();
        int contador = 1;

        while(contador <= linha_total){

            int linha = contador - 1;

            String coluna2 = jTable1.getValueAt(linha, 2).toString();
            String coluna6 = jTable1.getValueAt(linha, 6).toString();

            if (Produto == Integer.parseInt(coluna2)) {
                Resultado = String.valueOf(Qtde - Integer.parseInt(coluna6));
            } else {
                Resultado = String.valueOf(CalculoEstoque(Cod));
            }

            contador++;

        }

        if (linha_total == 0) {
            Resultado = String.valueOf(CalculoEstoque(Cod));
        }

        return Resultado;

    }

    private String NumNF(int Chave){

        String SQL;
        String NF = null;
        String Nota = null;

        SQL = "select tnf.codigo ";
        SQL = SQL + "from t_nota_fiscal_item tnfi ";
        SQL = SQL + "inner join t_nota_fiscal tnf on tnf.codigo = tnfi.nf_cod ";
        SQL = SQL + "and tnf.chave = tnfi.chave_cod ";
        SQL = SQL + "where tnfi.chave_cod = " + Chave + " ";
       
        Conexao = new ConexaoAccess();
        Conexao.Conectar();
        Conexao.setSQL(SQL);

        ResultSet RS = Conexao.Consultar();

        try{
            if (RS.next()){
                Nota = String.valueOf(RS.getString("codigo"));
            }
        }catch (Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro na validação da função: " + Erro);
        }

        Conexao.Desconectar();

        NF = Nota;

        return NF;
        
    }

    private int QtdeMovimentada(String NotaFiscal, int Produto){

        String SQL;
        int Qtde = 0;
        int Q = 0;

        SQL = "select (sum(tmi.qtde)) as qt from t_movimentacao_item tmi ";
        SQL = SQL + "inner join t_movimentacao tmo on tmo.codigo = tmi.movimentacao_cod ";
        SQL = SQL + "inner join t_nota_fiscal tnf on tnf.codigo = tmi.nf_cod ";
        SQL = SQL + "where tmi.nf_cod = '" + NotaFiscal + "' ";
        SQL = SQL + "and tmi.produto_cod = " + Produto + " ";

        System.out.println(SQL);

        Conexao = new ConexaoAccess();
        Conexao.Conectar();
        Conexao.setSQL(SQL);

        ResultSet RS = Conexao.Consultar();

        try{
            if (RS.next()){
                if (!(RS.getString("qt") == null)) {
                    Q = Integer.parseInt(RS.getString("qt"));
                } else {
                    Q = Integer.parseInt("0");
                }
            }
        }catch (Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro na validação da quantidade movimentada: " + Erro);
        }

        Conexao.Desconectar();

        return Qtde = Q;

    }

    private String NomeProduto(int Codigo){

        String Nome = null;
        String SQL = "select (nome) as retorno from t_produto where codigo = " + Codigo + " ";

        Fun = new Funcoes();
        return Nome = Fun.FuncaoSQL(SQL);
        
    }

    private int Calculando (int cod){

        int Estoque = 0;

        String NumQtde = String.valueOf(CalculoEstoque(cod));

        int Prod = CodigoProduto(cod);
        int Prod2 = cod;
        int Code = cod;

        String Resultado = String.valueOf(VerificaADD(Prod, Integer.parseInt(NumQtde), Code));
                
        String Prod2a = NumNF(cod);

        int Prod2b = QtdeMovimentada(Prod2a, cod);

        int Diferenca = (Integer.parseInt(Resultado) - Prod2b);

        return Estoque = Diferenca;

    }

    private int ListaFornecedor(String Codigo){

        int Resultado = 0;
        int Soma = 0;

        try {
            
            Conexao = new ConexaoAccess();
            Conexao.Conectar();
            String SQL;

            SQL = "select tnfi.codigo, (tnf.codigo || ' - ' || tpro.nome) as nome ";
            SQL = SQL + "from t_fornecedor tfo ";
            SQL = SQL + "inner join t_nota_fiscal tnf on tnf.fornecedor_cod = tfo.cnpjcpf ";
            SQL = SQL + "inner join t_nota_fiscal_item tnfi on tnfi.nf_cod = tnf.codigo ";
            SQL = SQL + "inner join t_produto tpro on tpro.codigo = tnfi.produto_cod ";
            SQL = SQL + "where tfo.cnpjcpf = '" + Codigo + "'";

            Conexao.setSQL(SQL);
            ResultSet RS = Conexao.Consultar();
            //DefaultComboBoxModel Modelo = new DefaultComboBoxModel();
            while(RS.next()){

                int Calculo = Calculando(Integer.parseInt(RS.getString("Codigo")));

                Soma = Soma + Calculo;

            }

        } catch(Exception Erro){
            JOptionPane.showMessageDialog(null, "Erro: " + Erro);
        }

        return Resultado = Soma;

    }

    private String Chave(String Codigo){

        String Resultado = null;

        Fun = new Funcoes();

        String SQL;
        
        SQL = "select (tnf.chave) as retorno ";
        SQL = SQL + "from t_nota_fiscal tnf ";
        SQL = SQL + "inner join t_nota_fiscal_item tnfi on tnfi.nf_cod = tnf.codigo ";
        SQL = SQL + "where tnfi.codigo = " + Codigo + " ";

        return Resultado = Fun.FuncaoSQL(SQL);

    }

    private int VerificandoBD(String nf, int Produto){

        int verificacao = 0;
        
        String SQL = null;
        
        SQL = "select (sum(qtde)) as qtde from t_movimentacao_item ";
        SQL = SQL + "where nf_cod = '" + nf + "' ";
        SQL = SQL + "and produto_cod = " + Produto + " ";

        Fun = new Funcoes();
                
        return verificacao = Integer.parseInt(Fun.FuncaoSQL(SQL));

    }

}